---
name: Build & Test Web

#
# Build, test & lint a Vue application
# Note: will create an artifact called 'app-build'.
#

on:
  workflow_call:
    inputs:
      node-version:
        description: Node Version (such as 20.5)
        default: 'lts/*'
        type: string
      test-timeout:
        description: Time (in minutes) after wich the test job will timeout
        default: 5
        type: number
      test-playwright-image:
        description: Image to use for Playwright testing (defaults to their prebuilt version)
        default: 'mcr.microsoft.com/playwright:v1.48.2'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # First lint & typecheck
  lint:
    name: Lint Application
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint
        run: pnpm lint
  typecheck:
    name: Typecheck Application
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Typecheck
        run: pnpm type-check

  # Then build & test
  build:
    name: Build Application
    needs: [lint, typecheck]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      playwright-configured: ${{ steps.prep-playwright.outputs.playwright-configured }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run build
        run: pnpm build
      # Archive
      - name: Store archive
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: |
            dist
          retention-days: 3
      - name: Prep. Playwright if needed
        id: prep-playwright
        run: |
          if test -f 'playwright.config.ts'; then
            echo "playwright-configured=true" >> "$GITHUB_OUTPUT"
          else
            echo "playwright-configured=false" >> "$GITHUB_OUTPUT"
          fi
  unit-test:
    name: Test Application
    needs: [lint, typecheck]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.test-timeout }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Prepare environment
        run: |
          if test -f '.env.test'; then
            cp -f '.env.test' '.env'
          fi
          if test -f '.env'; then
            sed -i -e 's/ENVIRONMENT=.*/ENVIRONMENT=ci-test-unit/g' '.env'
          fi
      - name: Run tests
        run: |
          if [ "$RUNNER_DEBUG" != '1' ]; then
            TEST_REPORTER='--reporter=junit --outputFile=test-report-junit.xml'
          fi
          pnpm vitest --run $TEST_REPORTER
      - name: Publish test report
        uses: mikepenz/action-junit-report@v4
        if: always()  # always run even if the previous step fails
        with:
          report_paths: test-report-junit.xml
          require_passed_tests: true

  # Finally run E2E tests if available
  e2e-test:
    name: Test Application (E2E)
    needs: [build]
    if: needs.build.outputs.playwright-configured == 'true'
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.test-playwright-image }}
      options: --user 1001
    timeout-minutes: ${{ inputs.test-timeout }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download archive
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: dist
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Prepare environment
        run: |
          if test -f '.env.test'; then
            cp -f '.env.test' '.env'
          fi
          if test -f '.env'; then
            sed -i -e 's/ENVIRONMENT=.*/ENVIRONMENT=ci-test-e2e/g' '.env'
          fi
      - name: Run tests
        run: pnpm exec playwright test --reporter=github
