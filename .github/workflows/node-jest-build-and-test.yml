---
name: Build & Test Node

#
# Build, test & lint a Node application
# Note: will create an artifact called 'app-build'.
#

on:
  workflow_call:
    inputs:
      node-version:
        description: Node Version (such as 20.5)
        default: 'lts/*'
        type: string
      test-timeout:
        description: Time (in minutes) after wich the test job will timeout
        default: 5
        type: number
      test-mysql-enabled:
        description: Enable MYSQL test service (defaults to false)
        default: false
        type: boolean
      test-mysql-image:
        description: Image to use for MySQL test DB (defaults to normal image)
        default: 'mysql:8'
        type: string
      test-nats-enabled:
        description: Enable NATS test service (defaults to false)
        default: false
        type: boolean
      test-nats-image:
        description: Image to use for NATS test store (defaults to our test image)
        default: 'ghcr.io/wisemen-digital/test-nats:latest'
        type: string
      test-postgres-image:
        description: Image to use for PostgreSQL test DB (defaults to normal image)
        default: 'postgis/postgis'
        type: string
      test-postgres-db:
        description: Name to use for PostgreSQL test DB (defaults to test_db)
        default: 'test_db'
        type: string
      test-redis-enabled:
        description: Enable Redis test service (defaults to false)
        default: false
        type: boolean
      test-redis-image:
        description: Image to use for Redis test store (defaults to normal image)
        default: 'redis:alpine'
        type: string
      test-typesense-enabled:
        description: Enable Typesense test service (defaults to false)
        default: false
        type: boolean
      test-typesense-image:
        description: Image to use for Typesense test DB (defaults to normal image)
        default: 'typesense/typesense:26.0'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # First lint & build
  lint:
    name: Lint Application
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Restore ESLint cache
        uses: actions/cache@v4
        with:
          path: .eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('eslint.config.js', '.eslintrc.json') }}
          restore-keys: |
            ${{ runner.os }}-eslint
      - name: Lint
        run: pnpm lint --cache --cache-location .eslintcache --cache-strategy content
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run build
        run: pnpm build
      # Archive
      - name: Store archive
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: |
            dist
            _build
          retention-days: 3
  prep-test:
    name: Prepare Test Services
    runs-on: ubuntu-latest
    outputs:
      mysql-image: ${{ steps.data.outputs.mysql-image }}
      nats-image: ${{ steps.data.outputs.nats-image }}
      redis-image: ${{ steps.data.outputs.redis-image }}
      typesense-image: ${{ steps.data.outputs.typesense-image }}
    steps:
      - name: Prepare Test Services
        id: data
        run: |
          if [ "${{ inputs.test-mysql-enabled }}" == "true" ]; then
            echo "mysql-image=${{ inputs.test-mysql-image }}" >> "$GITHUB_OUTPUT"
          else
            echo "mysql-image=" >> "$GITHUB_OUTPUT"
          fi
          if [ "${{ inputs.test-nats-enabled }}" == "true" ]; then
            echo "nats-image=${{ inputs.test-nats-image }}" >> "$GITHUB_OUTPUT"
          else
            echo "nats-image=" >> "$GITHUB_OUTPUT"
          fi
          if [ "${{ inputs.test-redis-enabled }}" == "true" ]; then
            echo "redis-image=${{ inputs.test-redis-image }}" >> "$GITHUB_OUTPUT"
          else
            echo "redis-image=" >> "$GITHUB_OUTPUT"
          fi
          if [ "${{ inputs.test-typesense-enabled }}" == "true" ]; then
            echo "typesense-image=${{ inputs.test-typesense-image }}" >> "$GITHUB_OUTPUT"
          else
            echo "typesense-image=" >> "$GITHUB_OUTPUT"
          fi

  # Then test
  test:
    name: Test Application
    needs: [lint, build, prep-test]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.test-timeout }}
    services:
      mysql:
        image: ${{ needs.prep-test.outputs.mysql-image }}
        env:
          MYSQL_DATABASE: testdb
          MYSQL_USER: 'mysql'
          MYSQL_PASSWORD: 'password'
          MYSQL_ROOT_PASSWORD: 'rootpassword'
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      nats:
        image: ${{ needs.prep-test.outputs.nats-image }}
        ports:
          - 4222:4222
      postgres:
        image: ${{ inputs.test-postgres-image }}
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ inputs.test-postgres-db }}
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'password'
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: ${{ needs.prep-test.outputs.redis-image }}
        ports:
          - 6379:6379
      typesense:
        image: ${{ needs.prep-test.outputs.typesense-image }}
        ports:
          - 8108:8108
        env:
          TYPESENSE_DATA_DIR: '/home'
          TYPESENSE_API_KEY: 'api_key'
        options: >-
          --health-cmd="bash -c 'exec 3<>/dev/tcp/localhost/8108 && printf \"GET /health HTTP/1.1\r\nConnection: close\r\n\r\n\" >&3 && head -n1 <&3 | grep 200 && exec 3>&-'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Download archive
        uses: actions/download-artifact@v4
        with:
          name: app-build
      - name: Run tests
        run: |
          touch '.env.test'
          pnpm test:pipeline
